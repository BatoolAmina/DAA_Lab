Difference Between Greedy and Dynamic Programming:

Greedy Method:
Approach:
Makes the locally optimal choice at each step, aiming for a globally optimal solution.
Problem Solving:
Solves the problem by taking one step at a time, making decisions based on immediate benefits.
Substructure:
No overlapping subproblems — decisions made at each step don't depend on past decisions.
Optimality:
Doesn't always guarantee an optimal solution for all problems, but works for some (e.g., Fractional Knapsack).
Examples:
Activity Selection, Huffman Coding, Prim’s Algorithm.

Dynamic Programming (DP):
Approach:
Breaks the problem into overlapping subproblems, solving each subproblem once and storing the result for reuse.
Problem Solving:
Uses previous solutions to build up the solution to the original problem.
Substructure:
Overlapping subproblems — a problem can be divided into smaller subproblems that are solved multiple times.
Optimality:
Guarantees an optimal solution by considering all possible solutions and reusing results (e.g., 0/1 Knapsack, Longest Common Subsequence).
Examples:
0/1 Knapsack, Fibonacci Sequence, Matrix Chain Multiplication.
